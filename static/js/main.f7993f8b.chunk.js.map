{"version":3,"sources":["registerServiceWorker.js","data.js","components/ChannelPage.js","components/VideoPlayer.js","components/VideoPage.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","categoriesVideoMap","url","name","channels","id","color","ChannelCard","channel","onSelectChannel","Card","onClick","ChannelPage","history","useHistory","selectChannel","push","map","idx","styled","div","props","VideoPlayer","onEnd","useState","isMuted","setIsMuted","playerConfig","playing","volume","height","width","muted","playsinline","onReady","setTimeout","onEnded","Box","className","Button","button","VideoPage","currentPage","setCurrentPage","useParams","videos","onNext","length","Page","App","path","rootElement","document","getElementById","ReactDOM","render","process","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f7993f8b.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  // if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n  if (\"serviceWorker\" in navigator) {\n    console.log(\"inside\", process.env.NODE_ENV);\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      console.log(\"returning\", process.env.NODE_ENV);\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      // const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      const swUrl = `${window.location}/service-worker.js`;\n      console.log(\"swURl\", swUrl);\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","export const categoriesVideoMap = {\n  \"1\": [\n    {\n      url: \"https://www.youtube.com/watch?v=USccSZnS8MQ\",\n      name: \"Thoda Thoda Pyaar\"\n    },\n    {\n      url: \"https://www.youtube.com/watch?v=pZbsVynV2so\",\n      name: \"Tu Mile Dil Khile\"\n    }\n  ],\n  \"2\": [\n    {\n      url: \"https://www.youtube.com/watch?v=y2tEPmwWEiI\",\n      name: \"Sugar & Brownies | DHARIA\"\n    }\n  ],\n  \"3\": [\n    { url: \"https://youtu.be/cbK_fHN0TDs\" },\n    { url: \"https://youtu.be/03RR4qSvG9Y\" },\n    { url: \"https://youtu.be/WYzYSdFDZDo\" },\n    { url: \"https://youtu.be/4H2zfWTOrjI\" },\n    { url: \"https://youtu.be/nccpEWtfGsU\" },\n    { url: \"https://youtu.be/lz6x57kdbyY\" },\n    { url: \"https://youtu.be/I37xSqMDzLA\" },\n    { url: \"https://youtu.be/JqIdA3L_EJQ\" },\n    { url: \"https://youtu.be/5VGgYwtBrTY\" }\n  ]\n};\n\nexport const channels = [\n  {\n    id: \"1\",\n    name: \"Bollywood\",\n    color: \"#dac4f7\"\n  },\n  {\n    id: \"2\",\n    name: \"Hollywood\",\n    color: \"#F4989C\"\n  },\n  {\n    id: \"3\",\n    name: \"Curated Videos\",\n    color: \"#D6F6DD\"\n  }\n];\n","import { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { channels } from \"../data\";\n\nconst ChannelPage = () => {\n  const history = useHistory();\n  const selectChannel = (channel) => {\n    history.push(`/video/${channel.id}`);\n  };\n  return (\n    <>\n      <ul>\n        {channels.map((channel, idx) => (\n          <ChannelCard\n            key={`channel-${idx}`}\n            channel={channel}\n            onSelectChannel={selectChannel}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nconst ChannelCard = ({ channel, onSelectChannel }) => {\n  return (\n    <Card onClick={() => onSelectChannel(channel)} color={channel.color}>\n      {channel.name}\n    </Card>\n  );\n};\n\nexport default ChannelPage;\n\nconst Card = styled.div`\n  margin: 12px;\n  padding: 24px;\n  background: ${(props) => props.color};\n  cursor: pointer;\n`;\n","import { useState } from \"react\";\nimport ReactPlayer from \"react-player/youtube\";\nimport styled from \"styled-components\";\n\nconst VideoPlayer = ({ url, onEnd }) => {\n  const [isMuted, setIsMuted] = useState(true);\n  const playerConfig = {\n    // url: \"https://www.youtube.com/watch?v=y2tEPmwWEiI\",\n    url,\n    // controls: true,\n    playing: true,\n    volume: 1,\n    height: \"100%\",\n    width: \"100%\",\n    muted: isMuted,\n    playsinline: true,\n    onReady: () => {\n      setTimeout(() => {\n        setIsMuted(false);\n      }, 0);\n      console.log(\"Ismuted\", isMuted);\n    },\n    onEnded: onEnd\n  };\n  return (\n    <Box className=\"player-wrapper\">\n      <ReactPlayer className=\"react-player\" {...playerConfig} />\n      <Button>Next</Button>\n    </Box>\n  );\n};\n\nexport default VideoPlayer;\n\nconst Box = styled.div`\n  .player-wrapper {\n    position: relative;\n    /* padding-top: 56.25%; */\n    /* Player ratio: 100 / (1280 / 720) */\n  }\n\n  & > .react-player {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n`;\n\nconst Button = styled.button`\n  padding: 4px 12px;\n  background: #d6f6dd;\n  border: none;\n`;\n","import { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { categoriesVideoMap } from \"../data\";\nimport VideoPlayer from \"./VideoPlayer\";\n\nconst VideoPage = () => {\n  const [currentPage, setCurrentPage] = useState(0);\n  const { id } = useParams();\n  const videos = categoriesVideoMap[id || \"1\"] || {};\n  const onNext = () => {\n    if (currentPage < videos.length - 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n  return (\n    <Page>\n      <VideoPlayer url={videos[currentPage].url} onEnd={onNext} />\n      <Button onClick={onNext}>Next</Button>\n    </Page>\n  );\n};\n\nexport default VideoPage;\n\nconst Page = styled.div`\n  height: 100%;\n  background: #010101;\n`;\nconst Button = styled.button`\n  margin: 12px;\n  padding: 4px 12px;\n  background: #d6f6dd;\n  border: none;\n`;\n","import \"./styles.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n  // Link\n} from \"react-router-dom\";\nimport ChannelPage from \"./components/ChannelPage\";\nimport VideoPage from \"./components/VideoPage\";\nimport styled from \"styled-components\";\n\nexport default function App() {\n  return (\n    <Box className=\"App\">\n      <Router>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/video/:id\">\n            <VideoPage />\n          </Route>\n          <Route path=\"/\">\n            <ChannelPage />\n          </Route>\n        </Switch>\n      </Router>\n    </Box>\n  );\n}\n\nconst Box = styled.div`\n  height: 100vh;\n  width: 100vw;\n`;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}